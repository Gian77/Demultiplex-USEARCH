#!/bin/bash -login

#SBATCH --time=12:00:00
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=64G
#SBATCH --job-name demultiplex
#SBATCH -A glbrc
#SBATCH --output=results-demultiplex-usearch.log

cd ${SLURM_SUBMIT_DIR}
cores=$SLURM_CPUS_PER_TASK
RAM=$SLURM_MEM_PER_NODE

# source the config file
source ./config.yml

# activate miniforge for the HPCC at MSU. This may be different in a different computer cluster.
module purge
module load Miniforge3
which conda
echo -e "\n"

echo -e "\n mkdir -p $project_dir/output_dir/ \n"; mkdir -p $project_dir/output_dir/

echo -e "\n========== Generating reverse complmeneted barcodes ==========\n"

# load the conda environment
conda activate python3
conda env list
echo -e "\n"

# reverse complement the barcodes
python $project_dir/scripts/barcodeRC.py $index

conda deactivate

index_RC=$(echo $index | cut -d"." -f1)

if test -f $project_dir/barcodes/${index_RC}_rc.fasta; then
	echo -e "Reverse complemented file generated.\nFirst 5 barcodes as follows:"
	head $project_dir/barcodes/${index_RC}_rc.fasta
fi

echo -e "\n========== Running USEARCH on barcodes ==========\n"

/mnt/research/glbrc_group/benuccigmn/TOOLS/usearch11.0.667_i86linux64 \
	-fastx_demux $R1\
	-reverse $R2 \
	-index $I1 \
	-trunclabels \
	-barcodes $index \
	-fastqout $project_dir/output_dir/R1_demux.fastq \
	-output2 $project_dir/output_dir/R2_demux.fastq

echo -e "\n========== Running USEARCH on RC barcodes ==========\n"
/mnt/research/glbrc_group/benuccigmn/TOOLS/usearch11.0.667_i86linux64 \
	-fastx_demux $R1\
	-reverse $R2 \
	-index $I1 \
	-trunclabels \
	-barcodes ${index_RC}_rc.fasta \
	-fastqout $project_dir/output_dir/R1_demux_RC.fastq \
	-output2 $project_dir/output_dir/R2_demux_RC.fastq

echo -e "\n========== Combining the files ==========\n"

cat $project_dir/output_dir/R1_demux.fastq \
	$project_dir/output_dir/R1_demux_RC.fastq > $project_dir/output_dir/R1_demux_combined.fastq

cat $project_dir/output_dir/R2_demux.fastq \
	$project_dir/output_dir/R2_demux_RC.fastq > $project_dir/output_dir/R2_demux_combined.fastq

echo -e "\n========== Split into single sample files ==========\n"

conda activate python3

# aplit the fastq file in single samples
python $project_dir/scripts/splitDemuxFastq.py $project_dir/output_dir/R1_demux_combined.fastq $project_dir/output_dir R1
python $project_dir/scripts/splitDemuxFastq.py $project_dir/output_dir/R2_demux_combined.fastq $project_dir/output_dir R2

conda deactivate

bash $project_dir/scripts/readCount.sh $project_dir/output_dir R1
bash $project_dir/scripts/readCount.sh $project_dir/output_dir R2

if test -f $project_dir/output_dir/Sample*.fasta; then
	echo -e "Samples extracted from library pool."
fi

echo -e "\n========== Count reads in all obtained files ==========\n"
for file in $project_dir/output_dir/R*.fastq; do 
	echo "$file: `echo $(cat $file | wc -l)/4 | bc`"; 
done > $project_dir/output_dir/Demultiplexed.counts

cat $project_dir/output_dir/Demultiplexed.counts
echo -e "\n"
cat $project_dir/output_dir/Sample_R1.counts
echo -e "\n"
cat $project_dir/output_dir/Sample_R2.counts

echo -e "\n========== gzip the files? $gzipped ==========\n"

if [[ "$gzipped" == "yes" ]]; then

	for i in $project_dir/output_dir/*.fastq; do 
		echo "$i"; 
		gzip "$i"; 
	done
else
	echo -e "\n You decided NOT gzipping the files.\n" 
fi


echo -e "\n========== Sbatch log ==========\n"
echo -e "\n Current directory: `pwd` \n"
echo -e "\n `sacct -u benucci -j $SLURM_JOB_ID --format=JobID,JobName,Start,End,Elapsed,NCPUS,ReqMem` \n"
scontrol show job $SLURM_JOB_ID
